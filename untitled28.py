# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IakjLSYwlMz4kQx1xfPWCqOsSiXyHmNV
"""

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import files
files.upload()
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d nguyentrongdai/vietnamese-currency
!unzip vietnamese-currency.zip -d vietnamese-currency_data

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

data_dir = 'vietnamese-currency_data/dataset'
train_datagen = ImageDataGenerator(rescale = 1 / 255.0,
                                   validation_split = 0.2,
                                   rotation_range = 20,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)
train_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size = (128, 128),
    batch_size =32,
    class_mode = 'categorical',
    subset = 'training')

validation_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size = (128, 128),
    batch_size = 32,
    class_mode = 'categorical',
    subset = 'validation')

from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from keras.models import Sequential
model=Sequential()
model.add(Conv2D(32, (3,3),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64, (3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(128, (3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(12,activation='softmax'))
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.fit(train_generator,epochs=5,validation_data=validation_generator)

model.save('final_model.h5')

from google.colab import files
import cv2
import numpy as np
import matplotlib.pyplot as plt

uploaded = files.upload()
img_path = list(uploaded.keys())[0]
img = cv2.imread(img_path)                   # ƒë·ªçc ·∫£nh m√†u
img_resized = cv2.resize(img, (128,128))     # resize
img_array = img_resized / 255.0              # chu·∫©n h√≥a (0-1)
img_array = np.expand_dims(img_array, axis=0) # th√™m chi·ªÅu batch
pred = model.predict(img_array)
class_index = np.argmax(pred)   # l·∫•y nh√£n c√≥ x√°c su·∫•t cao nh·∫•t
confidence = np.max(pred)
labels = list(train_generator.class_indices.keys())
print("D·ª± ƒëo√°n:", labels[class_index], "- ƒê·ªô tin c·∫≠y:", confidence)

# Hi·ªÉn th·ªã ·∫£nh
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title(f"D·ª± ƒëo√°n: {labels[class_index]}")
plt.axis("off")
plt.show()

import gradio as gr
import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model

# Dictionary th√¥ng tin ti·ªÅn
money_info = {
    "000000": "X",
    "000200": "200 ƒë·ªìng",
    "000500": "500 ƒë·ªìng",
    "001000": "1 000 ƒë·ªìng",
    "002000": "2 000 ƒë·ªìng",
    "005000": "5 000 ƒë·ªìng",
    "010000": "10 000 ƒë·ªìng",
    "020000": "20 000 ƒë·ªìng",
    "050000": "50 000 ƒë·ªìng",
    "100000": "100 000 ƒë·ªìng",
    "200000": "200 000 ƒë·ªìng",
    "500000": "500 000 ƒë·ªìng"
}

# Load model CNN ƒë√£ train
model_path = 'final_model.h5'  # ƒë·ªïi theo ƒë∆∞·ªùng d·∫´n model c·ªßa b·∫°n
model = load_model(model_path)

# Nh√£n l·ªõp (key t∆∞∆°ng ·ª©ng v·ªõi m·ªánh gi√°)
labels = ["000200", "000500", "001000", "002000", "005000", "010000", "020000", "050000", "100000", "200000", "500000", "000000"]

# H√†m d·ª± ƒëo√°n
def predict_currency(img):
    img = img.convert("RGB").resize((128,128))
    x = np.array(img)/255.0
    x = np.expand_dims(x, axis=0)
    preds = model.predict(x)
    class_idx = np.argmax(preds)
    confidence = preds[0][class_idx]
    return money_info.get(labels[class_idx], labels[class_idx]), round(confidence*100, 2)

# H√†m reset ·∫£nh
def reset_image():
    return None, "", ""

# CSS n√¢ng cao: font, m√†u n·ªÅn, icon, bo g√≥c
css_style = """
body {
    background: linear-gradient(to right, #c7f0c7, #fff7d6);
    font-family: 'Poppins', sans-serif;
}
h1 {
    color: #056608;
    font-family: 'Orbitron', sans-serif;
    font-size: 36px;
}
#predict-btn, #reset-btn {
    background-color: #ffd700;
    color: #000;
    font-weight: bold;
    font-size: 18px;
}
.gr-button {border-radius: 15px; padding: 10px 20px;}
.gr-box {
    border: 2px solid #056608;
    border-radius: 15px;
    padding: 15px;
    background-color: rgba(240, 255, 240, 0.9);
}
#label_output .gr-label::before {content: 'üí∞ ';}
#confidence_output .gr-label::before {content: '‚úÖ ';}
"""

# Giao di·ªán Gradio n√¢ng c·∫•p
with gr.Blocks(css=css_style) as demo:
    gr.Markdown("<h1 style='text-align:center;'>·ª®ng d·ª•ng nh·∫≠n di·ªán ti·ªÅn Vi·ªát Nam üíµüí∞</h1>")

    with gr.Row():
        with gr.Column():
            img_input = gr.Image(type="pil", label="Ch·ªçn ·∫£nh ho·∫∑c k√©o th·∫£ v√†o ƒë√¢y")
            btn_predict = gr.Button("Nh·∫≠n di·ªán ü™ô", elem_id="predict-btn")
            btn_reset = gr.Button("Ch·ªçn ·∫£nh kh√°c üîÑ", elem_id="reset-btn")
        with gr.Column():
            label_output = gr.Textbox(label="Lo·∫°i ti·ªÅn d·ª± ƒëo√°n", interactive=False)
            confidence_output = gr.Textbox(label="ƒê·ªô ch√≠nh x√°c (%)", interactive=False)

    # N√∫t d·ª± ƒëo√°n
    btn_predict.click(predict_currency, inputs=img_input, outputs=[label_output, confidence_output])
    # N√∫t reset ·∫£nh v√† x√≥a k·∫øt qu·∫£
    btn_reset.click(reset_image, inputs=None, outputs=[img_input, label_output, confidence_output])

# Ch·∫°y app tr·ª±c ti·∫øp tr√™n Colab
demo.launch(share=True)